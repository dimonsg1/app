git log - лог операций (q -выход)
git status - состояние текущих файлов в локальном репозитарии

git init - инициализация локального репозитория в текущей папке
git add . - добавить все файлы в коммит
git commit -m "comentar" - создание commit
git commit --amend -m "new comment" - изменить комментарий последнего коммита
git commit --amend --no-edit - переписать последний коммит

git restore --staged имя.файла - вернуть файл из индекса в рабочий каталог
git restore имя.файла - восстановить файл к исходному состоянию
 
git reset --soft предпоследний_коммит - сброс последнего коммита и отправка его в индекс (для восстаноления нужно сделать commit без add)
git reset --mixed предпоследний_коммит - сброс последнего коммита и отправка его в рабочий каталог (для восстаноления нужно сделать add и commit)
...или git reset HEAD~1 - тоже самое что и предыдущий вариант, 1 - сбросить последних 1 коммит (2-сбросить последних 2 коммита и т.д.)
git reset --hard коммит - удаляет безвозвратно все последние коммиты до указанного
git reset --hard - отменить последний индекс и коммит во всех файлах (не работает с файлами которые ниразу не добавялись в индекс и коммит)

git clean -f - отменить последние изменения в файлах которые небыли индексированы или коммент ранее
git rm --cached имя.файла - удалить файл из отслеживания после добавления в .gitignor

git checkout 690a95 имя.файла - откатить файл к версии коммита 690a95
git revert --no-commit e9bc60e7277d97a2686add174498c85be0790a24 - отменить несколько коммитов последовательно
git revert e9bc60 -отменяет определенный комит

git branch -m master - стать мастером операций
git remote add app https://github.com/dimonsg1/app.git - создать связку удоленного и локального репозитория
git remote -v - посмотреть удаленный путь репозитория на github.com
git remote remove original - удалить путь связку с удаленным репозитарием original

git clone https://github.com/dimonsg1/app.git  - клонирование репозитория
git pull - скачать обновления с удаленного репозитория
git push -u original master - отправить локальный репозиторий в удаленный первый раз далее
git push 

git diff readmi.txt - показать изменения в файле перед commit (можно сранивать два любых файла или коммита)
git diff - показать изменения во всех файлах перед commit
git blame index.html - паказать кто именно где, когда и что изменял в файле index.html
========================
ВЕТКИ
-----------------------
git branch catalog-filter - создать новую ветку catalog-filter
git branch -m newname - переименовать текущую ветку
git branch - посмотреть какие ветки есть в локальном репозитарии
git branch -a - посмотреть все ветки и везде
git branch -d имя_ветки - удалить ветку (нужно находится в другой ветки которую не удаляем), не удалится если небыла влита в другую ветку
git branch -D имя_ветки - удалить ветку даже если она была невлита в другую ветку
git push -u app catalog - создать ветку catalog в репозитории app
git checkout master - переключиться на ветку master
git checkout -b catalog-filter - создать и переключиться новую ветку catalog-filter

git stash -отложить не за комитченые изменения в stash
git stash pop - вернуться назад к отложенному stash0
git stash list - посмотреть отложенные изменения
git stash drop 0 - удалить stash0

git merge master - залить в текущую ветку все обновления с ветки master
git merge --abort - отменить слияние при конфликтах
git reset --merge имя_коммита_до_слияния - отменить слияние до указанного комита
git reset --hard - отменить слияние веток
-------------
Программа для обработки слияний в ручном режиме: https://meldmerge.org/
git config --global merge.tool meld - привязка к git
git mergetool - вызов программы
-----------
:wq - выход из редактора